swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login successful
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid Fields
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup successful
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid Fields
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      responses:
        '200':
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid Fields
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid Fields
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /transactions:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get monthly transactions
      description: Get all transactions for the current month, grouped by account
      parameters:
        - in: query
          name: month
          type: string
          format: date
          description: Month to get transactions for (YYYY-MM format)
          required: false
      produces:
        - application/json
      responses:
        '200':
          description: Transactions retrieved successfully
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid date format
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Create new transaction
      description: Create a new transaction record
      parameters:
        - in: body
          name: body
          description: Transaction creation payload
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      produces:
        - application/json
      responses:
        '201':
          description: Transaction created successfully
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid transaction data
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

  /transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get transaction details
      description: Get detailed information about a specific transaction
      parameters:
        - in: path
          name: transactionId
          type: string
          required: true
          description: ID of the transaction
      produces:
        - application/json
      responses:
        '200':
          description: Transaction details retrieved successfully
          schema:
            $ref: '#/definitions/StandardResponse'
        '404':
          description: Transaction not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update transaction
      description: Update specific fields of a transaction
      parameters:
        - in: path
          name: transactionId
          type: string
          required: true
          description: ID of the transaction
        - in: body
          name: body
          description: Transaction update payload
          required: true
          schema:
            $ref: '#/definitions/TransactionUpdate'
      produces:
        - application/json
      responses:
        '200':
          description: Transaction updated successfully
          schema:
            $ref: '#/definitions/StandardResponse'
        '400':
          description: Invalid update data
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Transaction not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      userName:
        type: string

  Login:
    properties:
      email:
        type: string
      password:
        type: string

  UserProfile:
    type: object
    properties:
      userName:
        type: string

  TransactionUpdate:
    type: object
    properties:
      title:
        type: string
      category:
        type: string
        enum: [Food, Transport, Shopping, Entertainment, Bills, Health, Other]
      notes:
        type: string

  Transaction:
    type: object
    properties:
      id:
        type: string
      date:
        type: string
        format: date-time
      title:
        type: string
      amount:
        type: number
      balance:
        type: number
      type:
        type: string
        enum: [En ligne, Retrait distributeur, Virement, Paiement]
      category:
        type: string
        enum: [Food, Transport, Shopping, Entertainment, Bills, Health, Other]
      notes:
        type: string

  AccountTransactions:
    type: object
    properties:
      accountId:
        type: string
      accountName:
        type: string
      transactions:
        type: array
        items:
          $ref: '#/definitions/Transaction'

  StandardResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      data:
        type: object

  ErrorResponse:
    type: object
    properties:
      status:
        type: integer
      error:
        type: string
      message:
        type: string
